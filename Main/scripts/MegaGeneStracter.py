#Extracts one gene from specified isolate list

#MultiGeneStracter
#Purpose: Pull a list of genes from all isolates file generated by Multiseqstracter
#Usage:MultiGenestracter <genefile.txt> <isolate> <modifier.
#Make sure you only have one gene per line in gene file and one isolate per line in isolate file
#Modifier is optional

#Imports
import re
import sys
import os


#Temporary errors
myIsoList = "none"
myGene = "none"
myMod = "none"

#Error file holder for app
myEF = "mGSError.txt"
errpath = os.path.abspath(myEF)
errFile = open(errpath, "w+");

#Potential errors
noIn = "Error: Did not select isolate list."
noGene = "Error: No gene file specified"
noIsoFind = "Error: Could not find specified isolate"
noExist = "Error: File does not exist."
getHelp = "Use the -h option for help"
use = "MegaGeneStracter <Isolate list.txt> <gene> <file_modifier>"


try:
    myIsoList= sys.argv[1] #input file
    myGene = sys.argv[2].strip()     #Isolate
    myMod = sys.argv[3]   #specify modifier optional
except IndexError:
    if myIsoList == "-h" or myGene == "-h" or myMod == "-h":
        print("Purpose: Extract specific genes of interest for several isolates\nUsage: MultiGenestracter <isolatefile.txt> <gene> <modifier>\nOne isolate per line in isolate file\nOne gene per line in gene file\nModifier is optional")
        sys.exit()
    elif myIsoList == "none":
        print(noIn, getHelp, use)
        errFile.write(noIn)
        errFile.close()
        sys.exit()
    elif myGene == "none":
        print(noGene, getHelp, use)
        errFile.write(noIn)
        errFile.close()
        sys.exit()

if myIsoList == "-h" or myGene == "-h" or myMod == "-h":
    print("Purpose: Extract specific genes of interest for several isolates\nUsage: MultiGenestracter <isolatefile.txt> <gene> <modifier>\nOne isolate per line in isolate file\nOne gene per line in gene file\nModifier is optional")
    sys.exit()


#Get path to gene list
try:
    inpath = os.path.abspath(myIsoList)
    isoFile = open(inpath, 'r')
except FileNotFoundError:
    print (noExist, getHelp, use)
    errFile.write(noExist)
    errFile.close()
    sys.exit()



isos = list()
data = list()
#For each isolate open and search for the gene in the line
for iso in isoFile:
    isos.append(iso.strip())
    
for entry in isos:
    if myMod == "none":
        myFile = entry + ".txt"
    else:
        myFile = entry + myMod + ".txt"   
    try:
        isopath = os.path.abspath(myFile)
        isofile = open(isopath, 'r')
    except FileNotFoundError:
        print (noIn, noExist, getHelp, use)
        errFile.write(noExist)
        errFile.close()
        sys.exit()     
    with open(isopath, 'r') as IsoFile:
        for line in IsoFile:
            if ">" in line:
                if entry in line:
                    if myGene in line:
                        next_line = IsoFile.readline()
                        info = line + next_line
                        data.append(info)
                        

out = os.path.abspath("Isolates_" + myGene + ".fasta")
OF= open(out, 'w')    

                   
                    
for info in data:
    OF.write(info)

print("Done!")
