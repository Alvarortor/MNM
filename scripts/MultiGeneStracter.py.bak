#MultiGeneStracter
#Purpose: Pull a list of genes from all isolates file generated by Multiseqstracter
#Usage:MultiGenestracter <genefile.txt> <isolate> <modifier.
#Make sure you only have one gene per line in gene file and one isolate per line in isolate file
#Modifier is optional

#Imports
import re
import sys
import os


#Temporary errors
myGeneList = "none"
myIso = "none"
myMod = "none"

#Error file holder for app
myEF = "MGSError.txt"
errpath = os.path.abspath(myEF)
errFile = open(errpath, "w+");

#Potential errors
noIn = "Error: Did not select iso."
noGene = "Error: No gene file specified"
noIsoFind = "Error: Could not find specified isolate"
noExist = "Error: File does not exist."
getHelp = "Use the -h option for help"
use = "MultiGeneStracter <GeneFile> <isolate> <file_modifier>"

try:
    myGeneList= sys.argv[1] #input file
    myIso = sys.argv[2]     #Isolate
    myMod = sys.argv[3]   #specify modifier optional

except IndexError:
    if myGeneList == "-h" or myIso == "-h" or myMod == "-h":
        print("Purpose: Extract specific genes of interest from a MultiSeqstracter output\nUsage: MultiGenestracter <genefile.txt> <isolatefile.txt> <modifier>\nOne isolate per line in isolate file\nOne gene per line in gene file\nModifier is optional")
        sys.exit()
    elif myGeneList == "none":
        print(noGene, getHelp, use)
        errFile.write(noGene)
        errFile.close()
        sys.exit()
    elif myIso == "none":
        print(noIn, getHelp, use)
        errFile.write(noIn)
        errFile.close()
        sys.exit()

if myGeneList == "-h" or myIso == "-h" or myMod == "-h":
    print("Purpose: Extract specific genes of interest from a MultiSeqstracter output\nUsage: MultiGenestracter <genefile.txt> <isolatefile.txt> <modifier> \nOne isolate per line in isolate file\nOne gene per line in gene file\nModifier is optional")
    sys.exit()
#inputs
myGeneList = sys.argv[1]
myIso  = sys.argv[2]
myMod = sys.argv[3]

#Get path to gene list
try:
    inpath = os.path.abspath(str(myGeneList))
    geneFile = open(inpath, 'r')
except FileNotFoundError:
    print (noExist, getHelp, use)
    errFile.write(noExist)
    errFile.close()
    sys.exit()





#Modifier check
if myMod == "none":
    myFile = myIso + "_genes.txt"
    myOF = myIso + "_pulled.txt"
    
else:
    myFile = myIso + myMod + "_genes.txt"
    myOF = myIso + myMod + "_pulled.txt"
    
#Paths and whatnot
try:
    outpath = os.path.abspath(myOF)
    outFile = open(outpath, "w");
    iniso = os.path.abspath(myFile)
    isoFile = open(iniso)
except FileNotFoundError:
    print (myFile, "does not exist. Use the -h option for help")
    sys.exit()
    
#lists
myData = list()
mygenes = list()
found = list()
unfound= list()

print("Running MultiGeneStracter on " + myFile)

#Find matches
for gene in geneFile:
    isoFile = open(iniso)
    gene = gene.strip()
    mygenes.append(gene)
    for line in isoFile:
            line = line.strip()
            if gene in line:
                found.append(gene)
                seq = isoFile.readline()
                seq = seq.strip()
                data = line + "\n" + seq
                myData.append(data)

err_signal = 0            
if len(mygenes) != len(set(found)):
    ErPath = os.path.abspath(myIso + "_PullErrors.txt")
    ErrorFile = open(ErPath, "w");
    print ("Some errors detected, creating error report")
    err_signal += 1


    for element in mygenes:
        if element not in found:
            err_mess = str("Could not find " + element + " in file./n")
            ErrorFile.write(str(err_mess))


                
#Pass along to output
for entry in myData:
    outFile.write(entry)


#Close everything
ErrorFile.close()
geneFile.close()
isoFile.close()

if err_signal > 0:
    os.startfile(myIso + "_PullErrors.txt")

print("Done!")